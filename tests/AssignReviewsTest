<?php
session_start();
$_SESSION['user_id'] = "0";

require_once('config.php');
require_once('includes/handlers.php');

class AssignReviewsTest extends PHPUnit_Framework_TestCase {
	
	/**
	 * 
	 * 
	 */
	public function testAssignReviews() {
		$_SESSION['course_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// No submissions, 1 review per student (tests 0 students)
		$assignment = $handler->changeAssignment("0", "Test Assignment", "1", "0", "0", "0", "0", "1", "0");
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		$handler->assignReviews("0");
		$this->assertEquals($assignment->getReviews(), array()); // empty
		
		// 1 submission, 1 review per student (tests self reviewing)
		$assignment = $handler->changeAssignment("0", "Test Assignment", "1", "0", "0", "0", "0", "1", "0");
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Create submission for student 1
		$_SESSION['user_id'] = "1";
		$_FILES["file"]["name"] = "test.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/test.zip";
		$sub1 = $handler->uploadArchive($assignment->getID());
		
		$handler->assignReviews("0");
		$this->assertEquals($assignment->getReviews(), array()); // empty
		
		// 3 submissions, 1 review per student (tests standard case)
		// Create submission for student 2
		$_SESSION['user_id'] = "2";
		$_FILES["file"]["name"] = "test.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/test.zip";
		$sub2 = $handler->uploadArchive($assignment->getID());
		
		// Create submission for student 3
		$_SESSION['user_id'] = "3";
		$_FILES["file"]["name"] = "test.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/test.zip";
		$sub3 = $handler->uploadArchive($assignment->getID());
		
		$handler->assignReviews("0");
		
		$student1reviews = $assignment->getUnmarkedSubmissions(1);
		$student2reviews = $assignment->getUnmarkedSubmissions(2);
		$student3reviews = $assignment->getUnmarkedSubmissions(3);
		
		$this->assertEquals(count($student1reviews), 1);
		$this->assertEquals(count($student2reviews), 1);
		$this->assertEquals(count($student3reviews), 1);
		return;
		// 3 submissions, 5 reviews per student (tests reviews >= submissions)
		$assignment = $handler->changeAssignment("0", "Test Assignment", "5", "0", "0", "0", "0", "1", "0");
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		$handler->assignReviews("0");
		
		// 3 submissions, 0 reviews per student (tests 0 reviews)
		$assignment = $handler->changeAssignment("0", "Test Assignment", "0", "0", "0", "0", "0", "1", "0");
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		$handler->assignReviews("0");
		
		// Delete submissions
		$sub1->delete();
		$sub2->delete();
		$sub3->delete();
	}
}