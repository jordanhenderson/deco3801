<?php
session_start();

$_SESSION['user_id'] = "0";
$_SESSION['course_id'] = "0";
$_SESSION['admin'] = true;

require_once('config.php');
require_once('includes/handlers.php');

class AssignReviewsTest extends PHPUnit_Framework_TestCase {
	/**
	 * Tests assignment review distribution when there were no submissions.
	 */
	public function testAssignReviewsNoSubmissions() {
		$_SESSION['user_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// 1 review per student
		$assignment = $handler->changeAssignment("0", "Test Assignment", "1", "0", "0", "0", "0", "1", "0");
		
		// Make sure assignment was created
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Assign the reviews
		$handler->assignReviews("0");
		
		// Shouldn't be any reviews for this assignment.
		$this->assertEquals($assignment->getReviews(), array()); // empty
		
		// Clean up
		$assignment->delete();
	}
	
	/**
	 * Tests assignment review distribution when there was only 1 submission.
	 * The student can't review themself, so should be no reviews.
	 */
	public function testAssignReviewsSingleSubmission() {
		$_SESSION['user_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// 1 review per student
		$assignment = $handler->changeAssignment("0", "Test Assignment", "1", "0", "0", "0", "0", "1", "0");
		
		// Make sure assignment was created
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Create and upload submission for student 1
		$_SESSION['user_id'] = "1";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub1 = $handler->uploadArchive($assignment->getID());
		
		// Make sure submission was created
		$this->assertNotNull($sub1);
		$this->assertEquals($sub1->isValid(), true);
		
		// Assign the reviews
		$handler->assignReviews("0");
		$this->assertEquals($assignment->getReviews(), array()); // empty
		
		// Clean up
		$sub1->delete();
		$assignment->delete();
	}
	
	/**
	 * Tests assignment review distribution for 3 students, with 1 review each.
	 * 
	 * Should each have to review the next student.
	 */
	public function testAssignReviewsStandard() {
		$_SESSION['user_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// 1 review per student
		$assignment = $handler->changeAssignment("0", "Test Assignment", "1", "0", "0", "0", "0", "1", "0");
		
		// Make sure assignment was created
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Create and upload submission for student 1
		$_SESSION['user_id'] = "1";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub1 = $handler->uploadArchive($assignment->getID());
		
		// Create and upload submission for student 2
		$_SESSION['user_id'] = "2";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub2 = $handler->uploadArchive($assignment->getID()); // Doesn't work second time.
		
		// Create and upload submission for student 3
		$_SESSION['user_id'] = "3";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub3 = $handler->uploadArchive($assignment->getID());
		
		// Make sure submissions were created
		$this->assertNotNull($sub1);
		$this->assertNotNull($sub2);
		$this->assertNotNull($sub3);
		$this->assertEquals($sub1->isValid(), true);
		$this->assertEquals($sub2->isValid(), true);
		$this->assertEquals($sub3->isValid(), true);
		
		// Assign the reviews
		$handler->assignReviews("0");
		
		$student1reviews = $assignment->getUnmarkedSubmissions(1);
		$student2reviews = $assignment->getUnmarkedSubmissions(2);
		$student3reviews = $assignment->getUnmarkedSubmissions(3);
		
		// Make sure each student has 1 review
		$this->assertEquals(count($student1reviews), 1);
		$this->assertEquals(count($student2reviews), 1);
		$this->assertEquals(count($student3reviews), 1);
		
		// Clean up
		$sub1->delete();
		$sub2->delete();
		$sub3->delete();
		$assignment->delete();
	}
	
	/**
	 * Tests review distribution when the assignment was made to have no reviews
	 */
	public function testAssignNoReviews() {
		$_SESSION['user_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// 0 reviews per student
		$assignment = $handler->changeAssignment("0", "Test Assignment", "0", "0", "0", "0", "0", "1", "0");
		
		// Make sure assignment was created
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Create and upload submission for student 1
		$_SESSION['user_id'] = "1";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub1 = $handler->uploadArchive($assignment->getID());
		
		// Create and upload submission for student 2
		$_SESSION['user_id'] = "2";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub2 = $handler->uploadArchive($assignment->getID()); // Doesn't work second time.
		
		// Create and upload submission for student 3
		$_SESSION['user_id'] = "3";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub3 = $handler->uploadArchive($assignment->getID());
		
		// Make sure submissions were created
		$this->assertNotNull($sub1);
		$this->assertNotNull($sub2);
		$this->assertNotNull($sub3);
		$this->assertEquals($sub1->isValid(), true);
		$this->assertEquals($sub2->isValid(), true);
		$this->assertEquals($sub3->isValid(), true);
		
		// Assign the reviews
		$handler->assignReviews("0");
		
		$student1reviews = $assignment->getUnmarkedSubmissions(1);
		$student2reviews = $assignment->getUnmarkedSubmissions(2);
		$student3reviews = $assignment->getUnmarkedSubmissions(3);
		
		// Shouldn't be any reviews for this assignment.
		$this->assertEquals($assignment->getReviews(), array()); // empty
		
		// Clean up
		$sub1->delete();
		$sub2->delete();
		$sub3->delete();
		$assignment->delete();
	}
	
	/**
	 * Tests review distribution for more reviews (5) than submissions (3)
	 */
	public function testAssignExcessiveReviews() {
		$_SESSION['user_id'] = "0";
		$handler = new PCRHandler();
		
		// Create a bogus assignment, with ID 0, and deletes the old one.
		$assignment = new Assignment(array("AssignmentID" => "0"));
		$assignment->delete();
		
		// 5 reviews per student
		$assignment = $handler->changeAssignment("0", "Test Assignment", "5", "0", "0", "0", "0", "1", "0");
		
		// Make sure assignment was created
		$this->assertNotNull($assignment);
		$this->assertEquals($assignment->isValid(), true);
		
		// Create and upload submission for student 1
		$_SESSION['user_id'] = "1";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub1 = $handler->uploadArchive($assignment->getID());
		
		// Create and upload submission for student 2
		$_SESSION['user_id'] = "2";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub2 = $handler->uploadArchive($assignment->getID()); // Doesn't work second time.
		
		// Create and upload submission for student 3
		$_SESSION['user_id'] = "3";
		$_FILES["file"]["name"] = "good_submission.zip";
		$_FILES["file"]["error"] = 0;
		$_FILES["file"]["tmp_name"] = "tests/good_submission.zip";
		$sub3 = $handler->uploadArchive($assignment->getID());
		
		// Make sure submissions were created
		$this->assertNotNull($sub1);
		$this->assertNotNull($sub2);
		$this->assertNotNull($sub3);
		$this->assertEquals($sub1->isValid(), true);
		$this->assertEquals($sub2->isValid(), true);
		$this->assertEquals($sub3->isValid(), true);
		
		// Assign the reviews
		$handler->assignReviews("0");
		
		$student1reviews = $assignment->getUnmarkedSubmissions(1);
		$student2reviews = $assignment->getUnmarkedSubmissions(2);
		$student3reviews = $assignment->getUnmarkedSubmissions(3);
		
		// Make sure each student has 2 reviews
		$this->assertEquals(count($student1reviews), 2);
		$this->assertEquals(count($student2reviews), 2);
		$this->assertEquals(count($student3reviews), 2);
	}
}